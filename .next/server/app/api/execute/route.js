"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/execute/route";
exports.ids = ["app/api/execute/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fexecute%2Froute&page=%2Fapi%2Fexecute%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fexecute%2Froute.ts&appDir=%2FUsers%2Felleg%2FDocuments%2Fsigprp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Felleg%2FDocuments%2Fsigprp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fexecute%2Froute&page=%2Fapi%2Fexecute%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fexecute%2Froute.ts&appDir=%2FUsers%2Felleg%2FDocuments%2Fsigprp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Felleg%2FDocuments%2Fsigprp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_elleg_Documents_sigprp_app_api_execute_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/execute/route.ts */ \"(rsc)/./app/api/execute/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/execute/route\",\n        pathname: \"/api/execute\",\n        filename: \"route\",\n        bundlePath: \"app/api/execute/route\"\n    },\n    resolvedPagePath: \"/Users/elleg/Documents/sigprp/app/api/execute/route.ts\",\n    nextConfigOutput,\n    userland: _Users_elleg_Documents_sigprp_app_api_execute_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/execute/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZleGVjdXRlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZleGVjdXRlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZXhlY3V0ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmVsbGVnJTJGRG9jdW1lbnRzJTJGc2lncHJwJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmVsbGVnJTJGRG9jdW1lbnRzJTJGc2lncHJwJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNNO0FBQ25GO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2lncHJwLz8zZWVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9lbGxlZy9Eb2N1bWVudHMvc2lncHJwL2FwcC9hcGkvZXhlY3V0ZS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZXhlY3V0ZS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2V4ZWN1dGVcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2V4ZWN1dGUvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvZWxsZWcvRG9jdW1lbnRzL3NpZ3BycC9hcHAvYXBpL2V4ZWN1dGUvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2V4ZWN1dGUvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fexecute%2Froute&page=%2Fapi%2Fexecute%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fexecute%2Froute.ts&appDir=%2FUsers%2Felleg%2FDocuments%2Fsigprp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Felleg%2FDocuments%2Fsigprp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/execute/route.ts":
/*!**********************************!*\
  !*** ./app/api/execute/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _app_lib_octave_executor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/app/lib/octave-executor */ \"(rsc)/./app/lib/octave-executor.ts\");\n/* harmony import */ var _app_utils_codeExecutor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/app/utils/codeExecutor */ \"(rsc)/./app/utils/codeExecutor.ts\");\n\n\n\nasync function POST(request) {\n    try {\n        const { code, useOctave = true } = await request.json();\n        if (!code) {\n            const errorResponse = {\n                success: false,\n                error: \"Code is required\"\n            };\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(errorResponse, {\n                status: 400\n            });\n        }\n        // Execute the code with Octave if available, or use fallback\n        const result = useOctave ? await (0,_app_lib_octave_executor__WEBPACK_IMPORTED_MODULE_1__.executeOctaveCode)(code) : (0,_app_utils_codeExecutor__WEBPACK_IMPORTED_MODULE_2__.fallbackExecutor)(code);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n    } catch (error) {\n        console.error(\"Error executing code:\", error);\n        const errorResponse = {\n            success: false,\n            error: \"Failed to execute code\",\n            details: error.message\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(errorResponse, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2V4ZWN1dGUvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RDtBQUNNO0FBQ0Y7QUFHckQsZUFBZUcsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxZQUFZLElBQUksRUFBRSxHQUFHLE1BQU1GLFFBQVFHLElBQUk7UUFFckQsSUFBSSxDQUFDRixNQUFNO1lBQ1QsTUFBTUcsZ0JBQW1DO2dCQUN2Q0MsU0FBUztnQkFDVEMsT0FBTztZQUNUO1lBRUEsT0FBT1YscURBQVlBLENBQUNPLElBQUksQ0FBQ0MsZUFBZTtnQkFBRUcsUUFBUTtZQUFJO1FBQ3hEO1FBRUEsNkRBQTZEO1FBQzdELE1BQU1DLFNBQThCTixZQUNoQyxNQUFNTCwyRUFBaUJBLENBQUNJLFFBQ3hCSCx5RUFBZ0JBLENBQUNHO1FBRXJCLE9BQU9MLHFEQUFZQSxDQUFDTyxJQUFJLENBQUNLO0lBQzNCLEVBQUUsT0FBT0YsT0FBTztRQUNkRyxRQUFRSCxLQUFLLENBQUMseUJBQXlCQTtRQUV2QyxNQUFNRixnQkFBbUM7WUFDdkNDLFNBQVM7WUFDVEMsT0FBTztZQUNQSSxTQUFTLE1BQWlCQyxPQUFPO1FBQ25DO1FBRUEsT0FBT2YscURBQVlBLENBQUNPLElBQUksQ0FBQ0MsZUFBZTtZQUFFRyxRQUFRO1FBQUk7SUFDeEQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3NpZ3BycC8uL2FwcC9hcGkvZXhlY3V0ZS9yb3V0ZS50cz84OWVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBleGVjdXRlT2N0YXZlQ29kZSB9IGZyb20gJ0AvYXBwL2xpYi9vY3RhdmUtZXhlY3V0b3InO1xuaW1wb3J0IHsgZmFsbGJhY2tFeGVjdXRvciB9IGZyb20gJ0AvYXBwL3V0aWxzL2NvZGVFeGVjdXRvcic7XG5pbXBvcnQgeyBBcGlSZXNwb25zZSwgQ29kZUV4ZWN1dGlvblJlc3VsdCB9IGZyb20gJ0AvYXBwL3R5cGVzL2FwaSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgeyBjb2RlLCB1c2VPY3RhdmUgPSB0cnVlIH0gPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICBcbiAgICBpZiAoIWNvZGUpIHtcbiAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2U6IEFwaVJlc3BvbnNlPG51bGw+ID0ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6ICdDb2RlIGlzIHJlcXVpcmVkJ1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGVycm9yUmVzcG9uc2UsIHsgc3RhdHVzOiA0MDAgfSk7XG4gICAgfVxuXG4gICAgLy8gRXhlY3V0ZSB0aGUgY29kZSB3aXRoIE9jdGF2ZSBpZiBhdmFpbGFibGUsIG9yIHVzZSBmYWxsYmFja1xuICAgIGNvbnN0IHJlc3VsdDogQ29kZUV4ZWN1dGlvblJlc3VsdCA9IHVzZU9jdGF2ZSBcbiAgICAgID8gYXdhaXQgZXhlY3V0ZU9jdGF2ZUNvZGUoY29kZSlcbiAgICAgIDogZmFsbGJhY2tFeGVjdXRvcihjb2RlKTtcbiAgICBcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24ocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBleGVjdXRpbmcgY29kZTonLCBlcnJvcik7XG4gICAgXG4gICAgY29uc3QgZXJyb3JSZXNwb25zZTogQXBpUmVzcG9uc2U8bnVsbD4gPSB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiAnRmFpbGVkIHRvIGV4ZWN1dGUgY29kZScsXG4gICAgICBkZXRhaWxzOiAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2VcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihlcnJvclJlc3BvbnNlLCB7IHN0YXR1czogNTAwIH0pO1xuICB9XG59ICJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJleGVjdXRlT2N0YXZlQ29kZSIsImZhbGxiYWNrRXhlY3V0b3IiLCJQT1NUIiwicmVxdWVzdCIsImNvZGUiLCJ1c2VPY3RhdmUiLCJqc29uIiwiZXJyb3JSZXNwb25zZSIsInN1Y2Nlc3MiLCJlcnJvciIsInN0YXR1cyIsInJlc3VsdCIsImNvbnNvbGUiLCJkZXRhaWxzIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/execute/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/lib/octave-executor.ts":
/*!************************************!*\
  !*** ./app/lib/octave-executor.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeOctaveCode: () => (/* binding */ executeOctaveCode)\n/* harmony export */ });\n/* harmony import */ var _app_lib_octave_integration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/app/lib/octave-integration */ \"(rsc)/./app/lib/octave-integration.ts\");\n\n/**\n * Executes MATLAB/Octave code via a server-side process\n */ async function executeOctaveCode(code, options = {}) {\n    // Attempt to use production methods first\n    try {\n        // Check if we're in a real server environment that can spawn processes\n        if (typeof process !== \"undefined\" && process.env.ENABLE_OCTAVE_NATIVE === \"true\") {\n            console.log(\"Using native Octave execution\");\n            return await (0,_app_lib_octave_integration__WEBPACK_IMPORTED_MODULE_0__.executeOctaveInProduction)(code, options);\n        }\n        // Check if we should use Docker-based execution\n        if (typeof process !== \"undefined\" && process.env.ENABLE_OCTAVE_DOCKER === \"true\") {\n            console.log(\"Using Docker-based Octave execution\");\n            return await (0,_app_lib_octave_integration__WEBPACK_IMPORTED_MODULE_0__.executeOctaveViaDocker)(code, options);\n        }\n    } catch (error) {\n        console.error(\"Error using production Octave methods, falling back to simulation:\", error);\n    // Fall back to simulation if production methods fail\n    }\n    // If we're here, we're using the simulated version\n    const startTime = performance.now();\n    const output = [];\n    try {\n        // Sanitize the code to prevent command injection\n        const sanitizedCode = sanitizeCode(code);\n        // In a production environment, this would use child_process.exec\n        // to communicate with a locally installed Octave or a Docker container\n        output.push(\">> Executing code with Octave integration (simulated)...\");\n        // For demonstration, we'll simulate the execution\n        // In a real implementation, this would call out to Octave via a process\n        await simulateOctaveExecution(sanitizedCode, output);\n        // Process data results \n        const data = await processOctaveResults(sanitizedCode);\n        const executionTime = performance.now() - startTime;\n        output.push(`>> Code executed successfully in ${executionTime.toFixed(2)} ms`);\n        return {\n            success: true,\n            output,\n            data,\n            executionTime\n        };\n    } catch (error) {\n        const errorMsg = error instanceof Error ? error.message : \"Unknown error\";\n        return {\n            success: false,\n            output: [\n                ...output,\n                `>> Error: ${errorMsg}`\n            ],\n            errorMessage: errorMsg\n        };\n    }\n}\n/**\n * Sanitizes Octave code to prevent command injection\n */ function sanitizeCode(code) {\n    // Remove system commands and potentially dangerous function calls\n    let sanitized = code.replace(/system\\s*\\(/g, \"BLOCKED_system(\").replace(/!\\s*(.+)/g, \"BLOCKED_SYSTEM_COMMAND\").replace(/exec\\s*\\(/g, \"BLOCKED_exec(\").replace(/eval\\s*\\(/g, \"BLOCKED_eval(\").replace(/feval\\s*\\(/g, \"BLOCKED_feval(\");\n    // Block file system access functions\n    const blockedFuncs = [\n        \"cd\",\n        \"fopen\",\n        \"fwrite\",\n        \"fprintf\",\n        \"fread\",\n        \"readdir\",\n        \"mkdir\",\n        \"rmdir\",\n        \"unlink\"\n    ];\n    blockedFuncs.forEach((func)=>{\n        const regex = new RegExp(`\\\\b${func}\\\\s*\\\\(`, \"g\");\n        sanitized = sanitized.replace(regex, `BLOCKED_${func}(`);\n    });\n    return sanitized;\n}\n/**\n * Simulate Octave execution for development purposes\n */ async function simulateOctaveExecution(code, output) {\n    // Parse the code for simulation\n    const lines = code.split(\"\\n\").filter((line)=>line.trim() !== \"\" && !line.trim().startsWith(\"%\"));\n    // Process variable assignments\n    for (const line of lines){\n        if (line.includes(\"=\") && !line.includes(\"function\")) {\n            output.push(`>> ${line.trim()}`);\n        } else if (line.includes(\"plot\") || line.includes(\"stem\") || line.includes(\"mesh\")) {\n            output.push(`>> ${line.trim()}`);\n            output.push(\">> Generating plot...\");\n        } else if (line.trim().endsWith(\";\")) {\n            // Command with suppressed output\n            output.push(`>> ${line.trim()}`);\n        } else {\n            // Command that produces output\n            output.push(`>> ${line.trim()}`);\n            output.push(\"ans = [Output would appear here in real Octave]\");\n        }\n    }\n    // Simulate processing time\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    return;\n}\n/**\n * Process results from Octave execution and prepare visualization data\n */ async function processOctaveResults(code) {\n    // Detect what kind of processing the code is doing\n    const isFFT = code.includes(\"fft(\") || code.includes(\"abs(fft(\");\n    const isFilter = code.includes(\"filter(\") || code.includes(\"filtfilt(\");\n    const isTimeDomain = code.includes(\"plot(\") || code.includes(\"stem(\");\n    // Sample rate detection\n    const fsMatch = code.match(/fs\\s*=\\s*(\\d+)/);\n    const fs = fsMatch ? parseInt(fsMatch[1]) : 1000;\n    // For demonstration, generate sample data for visualization\n    // In a real implementation, this would parse actual Octave output\n    // Generate time domain data\n    const sampleSize = 1000;\n    const t = Array.from({\n        length: sampleSize\n    }, (_, i)=>i / fs);\n    // Detect frequencies in code\n    const freqMatches = code.match(/f\\d*\\s*=\\s*(\\d+)/g);\n    const frequencies = freqMatches ? freqMatches.map((match)=>parseInt(match.split(\"=\")[1].trim())) : [\n        50,\n        120\n    ];\n    // Generate signal\n    const signal = t.map((time)=>{\n        return frequencies.reduce((sum, freq, i)=>{\n            const amplitude = i === 0 ? 1 : 0.5 / (i + 1);\n            return sum + amplitude * Math.sin(2 * Math.PI * freq * time);\n        }, 0);\n    });\n    // Add noise if specified\n    const noisy = code.includes(\"noise\") || code.includes(\"randn\");\n    const noisySignal = noisy ? signal.map((val)=>val + 0.1 * (Math.random() * 2 - 1)) : signal;\n    // Generate frequency domain data if FFT is detected\n    let frequencyData = undefined;\n    if (isFFT) {\n        const N = noisySignal.length;\n        const freqBins = Array.from({\n            length: N / 2\n        }, (_, i)=>i * (fs / N));\n        // Simulate FFT magnitude (would be actual FFT in real implementation)\n        const fftMagnitude = freqBins.map((f)=>{\n            return frequencies.reduce((sum, freq, i)=>{\n                const amplitude = i === 0 ? 1 : 0.5 / (i + 1);\n                return sum + amplitude * Math.exp(-10 * Math.pow((f - freq) / 5, 2));\n            }, 0);\n        });\n        frequencyData = {\n            x: freqBins,\n            y: fftMagnitude,\n            type: \"scatter\",\n            mode: \"lines\",\n            name: \"Frequency Spectrum\"\n        };\n    }\n    const timeData = {\n        x: t,\n        y: noisySignal,\n        type: \"scatter\",\n        mode: \"lines\",\n        name: \"Signal\"\n    };\n    // Return appropriate data\n    return {\n        time: timeData,\n        ...isFFT && frequencyData ? {\n            frequency: frequencyData\n        } : {}\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/octave-executor.ts\n");

/***/ }),

/***/ "(rsc)/./app/lib/octave-integration.ts":
/*!***************************************!*\
  !*** ./app/lib/octave-integration.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeOctaveInProduction: () => (/* binding */ executeOctaveInProduction),\n/* harmony export */   executeOctaveViaDocker: () => (/* binding */ executeOctaveViaDocker)\n/* harmony export */ });\n/**\n * Octave Integration Utility\n * \n * This file provides functions to integrate with GNU Octave for MATLAB-like \n * code execution in a production environment.\n * \n * IMPORTANT: This requires GNU Octave to be installed on the server.\n * In a serverless environment, consider using a Docker container.\n */ // In a Node.js environment, we would use:\n// import { exec } from 'child_process';\n// import { writeFile, readFile, unlink } from 'fs/promises';\n// import { tmpdir } from 'os';\n// import { join } from 'path';\n/**\n * Execute Octave code in a production environment\n * \n * NOTE: This is a placeholder implementation. In a real server environment,\n * you would need to:\n * 1. Write the code to a temporary file\n * 2. Execute Octave with the file as input\n * 3. Capture stdout, stderr\n * 4. Parse the results\n * 5. Clean up temporary files\n */ async function executeOctaveInProduction(code, options = {}) {\n    // This implementation is a placeholder that simulates what would happen\n    // in a real production environment where we can spawn processes\n    console.log(\"PRODUCTION MODE: Octave execution requested\");\n    console.log(\"Code to execute:\", code);\n    // In a real implementation, you would use something like:\n    /*\n  try {\n    // Create a temporary directory for input/output files\n    const tempDir = tmpdir();\n    const timestamp = Date.now();\n    const inputFile = join(tempDir, `octave_input_${timestamp}.m`);\n    const outputFile = join(tempDir, `octave_output_${timestamp}.json`);\n    \n    // Modify the code to output results as JSON\n    const wrappedCode = `\n      % Original code\n      ${code}\n      \n      % Capture variables for output\n      result = struct();\n      vars = who();\n      for i = 1:length(vars)\n        varname = vars{i};\n        if ~strcmp(varname, 'result') && ~strcmp(varname, 'vars') && ~strcmp(varname, 'i') && ~strcmp(varname, 'varname')\n          try\n            val = eval(varname);\n            if isnumeric(val) || islogical(val) || ischar(val) || iscell(val)\n              result.(varname) = val;\n            end\n          catch\n            % Skip variables that can't be serialized\n          end\n        end\n      end\n      \n      % Save to output file\n      saveJSON('${outputFile}', result);\n    `;\n    \n    // Write the code to a file\n    await writeFile(inputFile, wrappedCode);\n    \n    // Execute Octave with the file\n    const { stdout, stderr } = await new Promise((resolve, reject) => {\n      exec(\n        `octave --no-gui --quiet ${inputFile}`,\n        { timeout: options.timeout || 10000 },\n        (error, stdout, stderr) => {\n          if (error && !stderr.includes('warning')) {\n            reject(error);\n          } else {\n            resolve({ stdout, stderr });\n          }\n        }\n      );\n    });\n    \n    // Read results if available\n    let data;\n    try {\n      const resultText = await readFile(outputFile, 'utf8');\n      data = JSON.parse(resultText);\n    } catch (e) {\n      console.error('Error reading Octave output:', e);\n    }\n    \n    // Clean up temporary files\n    await Promise.all([\n      unlink(inputFile).catch(() => {}),\n      unlink(outputFile).catch(() => {})\n    ]);\n    \n    // Process output\n    const output = [];\n    if (stdout) {\n      output.push(...stdout.split('\\n').filter(Boolean));\n    }\n    \n    // Check for errors\n    if (stderr && stderr.includes('error')) {\n      return {\n        success: false,\n        output,\n        errorMessage: stderr,\n      };\n    }\n    \n    return {\n      success: true,\n      output,\n      data,\n      executionTime: 0 // Would calculate actual time in real implementation\n    };\n  } catch (error) {\n    return {\n      success: false,\n      output: [],\n      errorMessage: error.message || 'Unknown error executing Octave code',\n    };\n  }\n  */ // For now, return a simulated result\n    return {\n        success: true,\n        output: [\n            \">> Executing with Octave...\",\n            \">> This is a simulation of Octave execution in production.\",\n            \">> In a real environment, this would use child_process to execute Octave.\",\n            \">> Code execution completed.\"\n        ],\n        data: {\n            time: {\n                x: Array.from({\n                    length: 1000\n                }, (_, i)=>i / 1000),\n                y: Array.from({\n                    length: 1000\n                }, (_, i)=>Math.sin(2 * Math.PI * 10 * (i / 1000))),\n                type: \"scatter\",\n                mode: \"lines\",\n                name: \"Signal\"\n            },\n            frequency: {\n                x: Array.from({\n                    length: 500\n                }, (_, i)=>i),\n                y: Array.from({\n                    length: 500\n                }, (_, i)=>i === 10 ? 0.9 : i >= 8 && i <= 12 ? 0.1 * Math.exp(-0.5 * Math.pow((i - 10) / 1, 2)) : 0.01 * Math.random()),\n                type: \"scatter\",\n                mode: \"lines\",\n                name: \"Frequency Spectrum\"\n            }\n        },\n        executionTime: 120\n    };\n}\n/**\n * Docker-based Octave execution (for serverless environments)\n * \n * In a serverless environment like Vercel or Netlify, you can't spawn processes.\n * Instead, you'd need to call an external API that runs Octave in a Docker container.\n */ async function executeOctaveViaDocker(code, options = {}) {\n    // This would call a separate service that runs Octave in Docker\n    // For example, a separate API endpoint on AWS Lambda or Google Cloud Functions\n    try {\n        /* In a real implementation:\n    const response = await fetch('https://your-octave-api.example.com/execute', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${options.apiKey || process.env.OCTAVE_API_KEY}`\n      },\n      body: JSON.stringify({\n        code,\n        timeout: options.timeout || 10000\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Octave API error: ${response.statusText}`);\n    }\n    \n    return await response.json();\n    */ // For now, return simulated result\n        return {\n            success: true,\n            output: [\n                \">> Executing with Octave via Docker...\",\n                \">> This is a simulation of Octave execution via Docker.\",\n                \">> In a real environment, this would call an API that runs Octave in a container.\",\n                \">> Code execution completed.\"\n            ],\n            data: {\n                time: {\n                    x: Array.from({\n                        length: 1000\n                    }, (_, i)=>i / 1000),\n                    y: Array.from({\n                        length: 1000\n                    }, (_, i)=>Math.sin(2 * Math.PI * 5 * (i / 1000))),\n                    type: \"scatter\",\n                    mode: \"lines\",\n                    name: \"Signal\"\n                },\n                frequency: {\n                    x: Array.from({\n                        length: 500\n                    }, (_, i)=>i),\n                    y: Array.from({\n                        length: 500\n                    }, (_, i)=>i === 5 ? 0.9 : i >= 3 && i <= 7 ? 0.1 * Math.exp(-0.5 * Math.pow((i - 5) / 1, 2)) : 0.01 * Math.random()),\n                    type: \"scatter\",\n                    mode: \"lines\",\n                    name: \"Frequency Spectrum\"\n                }\n            },\n            executionTime: 250\n        };\n    } catch (error) {\n        return {\n            success: false,\n            output: [\n                \">> Error executing Octave via Docker\",\n                `>> ${error instanceof Error ? error.message : \"Unknown error\"}`\n            ],\n            errorMessage: error instanceof Error ? error.message : \"Unknown error\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/lib/octave-integration.ts\n");

/***/ }),

/***/ "(rsc)/./app/utils/codeExecutor.ts":
/*!***********************************!*\
  !*** ./app/utils/codeExecutor.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeCode: () => (/* binding */ executeCode),\n/* harmony export */   fallbackExecutor: () => (/* binding */ fallbackExecutor),\n/* harmony export */   parseCommands: () => (/* binding */ parseCommands)\n/* harmony export */ });\n// codeExecutor.ts - Handles MATLAB-like code execution and results\n// Basic MATLAB function registry to simulate execution\nconst functionRegistry = {\n    sin: (x)=>Array.isArray(x) ? x.map(Math.sin) : Math.sin(x),\n    cos: (x)=>Array.isArray(x) ? x.map(Math.cos) : Math.cos(x),\n    fft: (x)=>{\n        // Very simplified FFT simulation\n        const N = x.length;\n        const result = Array(N).fill(0).map((_, i)=>{\n            let sum = 0;\n            for(let n = 0; n < N; n++){\n                sum += x[n] * Math.cos(2 * Math.PI * i * n / N);\n            }\n            return {\n                real: sum,\n                imag: 0\n            };\n        });\n        return result;\n    },\n    abs: (x)=>{\n        if (typeof x[0] === \"object\" && \"real\" in x[0]) {\n            return x.map((val)=>Math.sqrt(val.real * val.real + val.imag * val.imag));\n        }\n        return x.map(Math.abs);\n    },\n    randn: (size)=>Array(size).fill(0).map(()=>Math.random() * 2 - 1)\n};\n/**\n * Executes MATLAB-like code and returns the results (client-side fallback)\n */ function fallbackExecutor(code) {\n    const startTime = performance.now();\n    const output = [];\n    let data = null;\n    try {\n        // Parse the code to extract key information\n        output.push(\">> Running code (fallback mode)...\");\n        // Extract sampling variables\n        const fsMatch = code.match(/fs\\s*=\\s*(\\d+)/);\n        const fs = fsMatch ? parseInt(fsMatch[1]) : 1000;\n        output.push(`>> Sampling frequency: ${fs} Hz`);\n        // Detect signal generation\n        if (code.includes(\"sin(\") || code.includes(\"cos(\")) {\n            output.push(\">> Generating signal...\");\n        }\n        // Detect FFT/frequency analysis\n        if (code.includes(\"fft(\")) {\n            output.push(\">> Computing frequency analysis...\");\n        }\n        // Generate sample data based on code content\n        const sampleSize = 1000;\n        // Time domain data\n        const t = Array.from({\n            length: sampleSize\n        }, (_, i)=>i / fs);\n        // Detect frequencies in code\n        const freqMatches = code.match(/f\\d*\\s*=\\s*(\\d+)/g);\n        const frequencies = freqMatches ? freqMatches.map((match)=>parseInt(match.split(\"=\")[1].trim())) : [\n            50\n        ];\n        output.push(`>> Detected frequencies: ${frequencies.join(\", \")} Hz`);\n        // Generate a signal based on detected frequencies\n        const signal = t.map((time)=>{\n            return frequencies.reduce((sum, freq, i)=>{\n                const amplitude = i === 0 ? 1 : 0.5 / (i + 1);\n                return sum + amplitude * Math.sin(2 * Math.PI * freq * time);\n            }, 0);\n        });\n        // Add noise if mentioned in the code\n        const noisy = code.includes(\"noise\") || code.includes(\"randn\");\n        const noisySignal = noisy ? signal.map((val)=>val + 0.1 * (Math.random() * 2 - 1)) : signal;\n        if (noisy) {\n            output.push(\">> Added noise to signal\");\n        }\n        // Generate frequency domain data\n        const N = noisySignal.length;\n        const frequencies2 = Array.from({\n            length: N / 2\n        }, (_, i)=>i * (fs / N));\n        // Simplified FFT calculation\n        const fftMagnitude = frequencies2.map((f)=>{\n            return frequencies.reduce((sum, freq, i)=>{\n                const amplitude = i === 0 ? 1 : 0.5 / (i + 1);\n                return sum + amplitude * Math.exp(-10 * Math.pow((f - freq) / 5, 2));\n            }, 0);\n        });\n        const timeData = {\n            x: t,\n            y: noisySignal,\n            type: \"scatter\",\n            mode: \"lines\",\n            name: \"Signal\"\n        };\n        const frequencyData = {\n            x: frequencies2,\n            y: fftMagnitude,\n            type: \"scatter\",\n            mode: \"lines\",\n            name: \"Frequency Spectrum\"\n        };\n        data = {\n            time: timeData,\n            frequency: frequencyData\n        };\n        // Find plot titles in the code\n        const titleMatch = code.match(/title\\(['\"](.+)['\"]\\)/);\n        if (titleMatch && titleMatch[1]) {\n            output.push(`>> Plot title: \"${titleMatch[1]}\"`);\n        }\n        const executionTime = performance.now() - startTime;\n        output.push(`>> Code executed successfully in ${executionTime.toFixed(2)} ms`);\n        return {\n            success: true,\n            output,\n            data,\n            executionTime\n        };\n    } catch (error) {\n        const errorMsg = error instanceof Error ? error.message : \"Unknown error\";\n        return {\n            success: false,\n            output: [\n                ...output,\n                `>> Error: ${errorMsg}`\n            ],\n            errorMessage: errorMsg\n        };\n    }\n}\n// For backward compatibility\nconst executeCode = fallbackExecutor;\n/**\n * Parse and execute MATLAB-like commands line by line\n */ function parseCommands(code) {\n    const lines = code.split(\"\\n\");\n    const output = [];\n    // Process each non-comment line\n    lines.forEach((line)=>{\n        line = line.trim();\n        // Skip empty lines and comments\n        if (line === \"\" || line.startsWith(\"%\")) {\n            return;\n        }\n        // Add to output\n        output.push(`>> ${line}`);\n        // If line is a variable assignment, add value\n        if (line.includes(\"=\") && !line.includes(\"function\")) {\n            const variable = line.split(\"=\")[0].trim();\n            output.push(`${variable} = [...]`);\n        }\n    });\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/utils/codeExecutor.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fexecute%2Froute&page=%2Fapi%2Fexecute%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fexecute%2Froute.ts&appDir=%2FUsers%2Felleg%2FDocuments%2Fsigprp%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Felleg%2FDocuments%2Fsigprp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();